name: CI/CD Pipeline

# Trigger workflow on pushes and pull requests to main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define the build-and-test job
jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci
        
      # Step 4: Run tests
      - name: Run tests
        run: npm test
        
      # Step 5: Build Backend Docker image
      - name: Build Backend Docker image
        run: docker build -t url-shortener-backend:latest .
        
      # Step 6: Build Frontend Docker image
      - name: Build Frontend Docker image
        run: docker build -t url-shortener-frontend:latest ./frontend
        
      # Step 7: Verify Docker images were created
      - name: Verify Docker images
        run: |
          echo "Backend image:"
          docker images url-shortener-backend:latest
          echo "Frontend image:"
          docker images url-shortener-frontend:latest
          
      # Step 8: Test Docker Compose (optional - can be commented out if too slow)
      - name: Test Docker Compose
        run: |
          echo "Testing Docker Compose configuration..."
          # Try modern docker compose first, fallback to docker-compose if available
          if command -v docker compose &> /dev/null; then
            docker compose config
            echo "✅ Docker Compose configuration is valid (using 'docker compose')"
          elif command -v docker-compose &> /dev/null; then
            docker-compose config
            echo "✅ Docker Compose configuration is valid (using 'docker-compose')"
          else
            echo "⚠️  Docker Compose not available, skipping validation"
            echo "✅ Docker images built successfully"
          fi

# Docker Build and Push Job (runs only on main branch pushes)
  docker-build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Step 2: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Step 3: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      # Step 4: Extract metadata for Docker images
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener-backend
            ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      # Step 5: Build and push Backend Docker image
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Step 6: Build and push Frontend Docker image
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Step 7: Verify pushed images
      - name: Verify pushed images
        run: |
          echo "✅ Docker images successfully pushed to Docker Hub:"
          echo "Backend: ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener-backend"
          echo "Frontend: ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener-frontend"
